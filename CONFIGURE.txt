Configuring your Build Environment
----------------------------------

The build tree relies on Maven 3 for executing unit tests and 
integration tests across the 3 platforms (GAE, MySQL, PostgreSQL).
The source tree is in the top level project within Maven.  The 
directories underneath are Eclipse projects and/or Maven 
sub-projects.  

If you're a Maven expert and have suggestions about the Maven 
project tree, please contact mitchellsundt@gmail.com

=====================
Minimal Eclipse Setup
---------------------

For executing only in Eclipse with the bare minimum, you need the 
odk-gae-settings project and the eclipse-aggregate-gae 
project.  These should not require any Maven setup.

Skip to the next section if you want a fully configured development environment.

The steps required are:

(0) Install the latest Java 6 SDK

(1) Install Eclipse 3.6.2 or higher.  This workspace WILL NOT work with 
    Eclipse 3.5.2 and earlier.

(2) Install Google Eclipse Plugin with App Engine SDK and Google Web Toolkit SDK.

(3) Start Eclipse.  Choose the parent directory of the clone'd repository as your workspace.

Windows / Preferences:

  Google / App Engine:
  
    Be sure there is an App Engine 1.5.3 or higher SDK defined.
	If the default App Engine version is not 1.5.3, you may need to 
	tweak with the project settings to get the newer jars to be added.

  Google / Web Toolkit:
  
    Be sure there is a WebToolkit SDK defined 2.3.0 or higher.
	The default GWT version should match that in the maven 
	pom.xml (currently 2.3.0).  The GWT library is installed as 
	part of the plugin and can be found in:
	...\eclipse\plugins\com.google.gwt.eclipse.sdkbundle_2.3.0...\gwt-2.3.0

File / Import:

    Choose the directory of the clone'd repository as the directory to search
	(this is one level below the workspace directory).
	
	Choose ONLY the eclipse-aggregate-gae and odk-gae-settings projects.

	This should refresh and build with one error (a missing odk-settings-latest.jar).
	
(4)	Edit odk-gae-settings / common / security.properties

Be sure to set the security.server.superUser to your gmail account. Save.

(5) Select the 'build.xml' (Ant Buildfile), right-click, and 
choose Run As / Ant Build.  This will rebuild the configuration 
jar and copy it into the eclipse project.

(6) Return to Eclipse:

Refresh the eclipse-aggregate-gae project (to pick up the updated jar file).

Select eclipse-aggregate-gae project.

Click on the red toolbox (GWT compile) to compile the GWT Java code into javascript.

(7) Running:

Select eclipse-aggregate-gae project.

Run As 'Web Application'

Choose index.html

Double-click to open the url.  After logging on, if running with 
the debug server, you will need to hand-edit the url to restore
the gwt-server address.

==========================================
Troubleshooting Debugging/Running 
------------------------------------------

(1) Javascript refresh loop 

If the database schema has changed, the browser may flash
and be stuck in a javascript refresh loop.  To remedy,
delete your local datastore (instructions below)

(2) Odd behaviors under Eclipse

The Eclipse GWT plugin does not normally keep the compiled
client-side javascript up to date with the debug-enabled
GWT Java client code.  This can cause a number of inconsistencies
when the ?gwt.codesvr=127.0.0.1:9997 query string is dropped 
off the URL during redirects when logging in, etc.

First, verify that if you are running under debug, you have
the ?gwt.codesvr=127.0.0.1:9997 query string on your URLs.

Second, periodically, when stopped, click on the red toolbox
to compile the javascript.

Third, periodically clear your browser cache to force a complete
re-loading of the clientside javascript.

Fourth, if you have moved or changed client interfaces, you 
may need to manually browse to the war diretory and delete 
the contents of the war/aggregateui and war/WEB-INF/deploy
directories.  

(3) Odd errors about locking scopes.

If you are debugging code within a transaction
region (these are presently isolated to TaskLockImpl.java),
the datastore can get confused about the transaction scopes
that are active.  You may need to close eclipse, re-open, 
and delete the datastore to clear this problem.

-----------------------
Clearing your Datastore
-----------------------

To delete the local datastore:

(1) In Eclipse, browse to war/WEB-INF/appengine-generated
(2) Hit Refresh
(3) delete "local_db.bin"

==========================================
Full Development Environment Configuration
------------------------------------------

(1) Install Maven 3.  This will generally set up a maven repository under
    the user's home directory:  ${HOME}/.m2/repository

(2) Install Eclipse 3.6.2 or higher.  This workspace WILL NOT work with 
    Eclipse 3.5.2 and earlier.

(3) Install Google Eclipse Plugin with App Engine SDK and Google Web Toolkit SDK.

(4) Optionally Install Tomcat 6.0.  
    This is required unless you do not import or always keep closed
    the MySQL and Postgres projects and don't use maven.

(5) Optionally: Install Postgres

For Postgres, run these commands:

----postgres-script-start-----
create database "odk_test";
create schema "odk_test";
create user "odk_test" with unencrypted password 'odk_test';
grant all privileges on database "odk_test" to "odk_user";
alter database "odk_test" owner to "odk_test";
----postgres-script-end-------

From the Postgres SQL shell (psql) commandline client,
using the root account and password, if the above commands
are in the file postgres.sql, you can type:

\cd C:/your_path_no_spaces_forward_slashes_only
\i postgres.sql
\q

(6) Optionally: Install MySQL

(6a)
For MySQL, run this script:

UPDATE mysql.user SET Password=PASSWORD('odk_test') WHERE User='root';
FLUSH PRIVILEGES;
CREATE USER 'odk_test'@'localhost' IDENTIFIED BY 'odk_test';
CREATE DATABASE odk_test;
GRANT ALL PRIVILEGES ON odk_test.* TO 'odk_test'@'localhost' WITH GRANT OPTION;

(6b)
For MySQL, download and copy the MySQL Connector J jar into the Tomcat /lib
directory (mysql-connector-java-5.1.17.jar to apache-tomcat-6.0.26/lib).
You must stop tomcat, if it is running, in order for the library to be detected.

For Maven (3) is optional; (4), (5) and (6) are required in order
to perform a full build.

----------

(7) Register libraries in Maven: (this is also required for Eclipse builds)

The libraries to be registered in maven are in the src/main/libs directory.
See the readme there for the maven commands to upload those files into your
local repository.  In some cases, these are cutting edge Google libraries that
may no longer need to be manually installed (once they get published to maven).

(8) Edit Maven's settings.xml file (this is in the .m2 directory).

A minimal file is:

<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <servers>
	<server>
		<id>local.gae</id>
		<username>mitchellsundt@gmail.com</username>
		<password></password>
	</server>
  </servers>
  <profiles>
  	<profile>
  	  <id>gae</id>
  	  <activation><activeByDefault/></activation>
  	  <properties>
	    <temp.home>C:\\Users\\user\\AppData\\Local\\Temp</temp.home>
	    <gae.home>\C:\\Program Files (x86)\\Google AE\\appengine-java-sdk-1.5.1</gae.home>
		<bitrock.home>C:\Program Files (x86)\BitRock InstallBuilder Professional 7.2.2</bitrock.home>
		<keystore.propertyfile>\C:\\Users\\user\\keystore\\jarSignerDetails.txt</keystore.propertyfile>
		<headless.operation>no</headless.operation>
		<mysql.client.executable>C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysql.exe</mysql.client.executable>
		<mysql.root.password>ROOTPASSWORDHERE</mysql.root.password>
		<postgres.client.executable>C:\\Program Files\\PostgreSQL\\9.0\\bin\\psql.exe</postgres.client.executable>
		<postgres.root.password>POSTGRESPASSWORDHERE</postgres.root.password>
		<test.server.port>7070</test.server.port>
		<firefox.executable>....\\firefox.exe</firefox.executable>
		<catalina.zip>...\\apache-tomcat-6.0.32-windows-x64.zip</catalina.zip>
	  </properties>
  	</profile>
  </profiles>
  <activeProfiles><activeProfile>gae</activeProfile></activeProfiles>
</settings>

The installer is not hooked into the parent Maven project, but identifies that project as its
parent.  So you can build the top-level project to build and run unit tests, integration tests, 
etc. and do not need bitrock installed.

----------

(9) Start Eclipse.  Choose the parent directory of the clone'd repository as your workspace.

Windows / Preferences:

  Google / App Engine:
  
    Be sure there is an App Engine 1.5.1 or higher SDK defined.
	The default GWT version should match that in the maven 
	pom.xml (currently 1.5.1).

  Google / Web Toolkit:
  
    Be sure there is a WebToolkit SDK defined 2.3.0 or higher.
	The default GWT version should match that in the maven 
	pom.xml (currently 2.3.0).
	
  Java / Build Path / Classpath Variables:

	Define a new variable, M2_REPO, pointing to the .m2/repository
	directory, or wherever you have configured your local 
	Maven repository to be.

  Server / Runtime Environments:

      Add: Apache Tomcat 6.0 and point it to the install location 
      used in (3) earlier.  This is optional if you will not be 
	importing or using the MySQL and Postgres builds.

  File / Import:

    Choose the directory of the clone'd repository as the directory to search
	(this is one level below the workspace directory).
	
	Choose ONLY the eclipse-aggregate-gae and odk-gae-settings projects.

	This should refresh and build without any errors.
	
(10)	Edit odk-gae-settings / common / security.properties

Be sure to set the security.server.superUser to your gmail account. Save.

(11) Select the 'build.xml' (Ant Buildfile within odk-gae-settings), right-click, and 
choose Run As / Ant Build.  This will rebuild the configuration 
jar and copy it into the eclipse project.

(12) Refresh the eclipse-aggregate-gae project (to pick up the updated jar file).

Select eclipse-aggregate-gae project.

Click on the red toolbox (GWT compile) to compile the GWT Java code into javascript.

(13) Running:

Select eclipse-aggregate-gae project.

Run As 'Web Application'

Choose index.html

Double-click to open the url.  After logging on, if running with 
the debug server, you will need to hand-edit the url to restore
the gwt-server address.

(14) For the non-gae projects, you will need to first build
with maven manually.  Open a command window, browse to the 
clone'd repository directroy. Type:

mvn install

This will build and install the projects, running the unit tests
against the 3 datastores (Google BigTable, MySQL, Postgresql),
and building the wars for the 3 platforms.

(15) you can now also import the aggregate-mysql project into
eclipse.  It can be used to export a WAR file similar to what 
can be built with Maven.

(16) If you have bitrock installed and licensed, you can 
build the bitrock installer.  First, 
 copy aggregate-mysql\target\aggregate-mysql-1.0.war bitrock-installer
 cd bitrock-installer
 mvn clean
 mvn install
Open bitrock and open the buildWar.xml project file in this directory.
On the packaging page, build for windows, linux and OSX.

