package org.opendatakit.aggregate.server;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.opendatakit.aggregate.ContextFactory;
import org.opendatakit.aggregate.client.preferences.OdkTablesAdmin;
import org.opendatakit.aggregate.client.preferences.OdkTablesAdminService;
import org.opendatakit.aggregate.odktables.DataStoreUserData;
import org.opendatakit.common.persistence.CommonFieldsBase;
import org.opendatakit.common.persistence.Datastore;
import org.opendatakit.common.persistence.EntityKey;
import org.opendatakit.common.persistence.Query;
import org.opendatakit.common.persistence.client.exception.DatastoreFailureException;
import org.opendatakit.common.persistence.exception.ODKDatastoreException;
import org.opendatakit.common.security.client.exception.AccessDeniedException;
import org.opendatakit.common.web.CallingContext;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;

public class OdkTablesAdminServiceImpl extends RemoteServiceServlet implements
    OdkTablesAdminService {

	/**
	* Serialization Identifier
	*/
	private static final long serialVersionUID = -2602832816355702415L;

	/**
	 * This method should return the list of all the admins/users in the
	 * datastore. Currently from the table generated by DataStoreUserData.
	 * NB: Does not use the simple datastore interaction--might need to be careful
	 * if that is what the other OdkTables things use.
	 */
	@Override
	public OdkTablesAdmin[] listAdmin() throws AccessDeniedException, DatastoreFailureException {
		try {
			CallingContext cc = this.getCC();
			// get the datastore from which you will get the user info
			Datastore ds = cc.getDatastore();
			DataStoreUserData prototype = DataStoreUserData.assertRelation(cc);
			// query for the users
			Query query = ds.createQuery(prototype, "OdkTablesAdminServiceImpl.listAdmin", cc.getCurrentUser());
			List<? extends CommonFieldsBase> results = query.executeQuery();

			// at this point results should be a list of DataStoreUserData objects
			if (!results.isEmpty()) {
				// check to make sure it is a DataStoreUserData object.
				if (results.get(0) instanceof DataStoreUserData) {
					// make a new array of OdkAdmins to returns
					OdkTablesAdmin[] listOfAdmins = new OdkTablesAdmin[results.size()];
					for (int i = 0; i < results.size(); i++) {
						// make a temporary Admin object to fill with data.
						// cast like crazy to get the info, fill it, and then set it to
						// the array.
						OdkTablesAdmin holder = new OdkTablesAdmin();
						// set the aggregateUid as the uuid from the datastore. this way you can delete
						// without having to parse through the whole list
						holder.setAggregateUid(results.get(i).getEntityKey().getKey());
						holder.setExternalUid(((DataStoreUserData) results.get(i)).getUserIdExternal());
						holder.setName(((DataStoreUserData) results.get(i)).getUserName());
						listOfAdmins[i] = holder;
					}
					return listOfAdmins;
				}
			}

			// TODO:
			// if you fall through to here, you've either got 0 admins
			// or you've returned something bizarre... not sure which it is...
			// should make something to notify them this is the case.

	   } catch (ODKDatastoreException e) {
		   e.printStackTrace();
		   throw new DatastoreFailureException(e);
	   }

		return new OdkTablesAdmin[0];
	}

	/**
	 * Deletes an ODK Tables admin from the datastore.
	 * @throws DatastoreFailureException
	 */
	@Override
	public Boolean deleteAdmin(String aggregateUid) throws AccessDeniedException, DatastoreFailureException {
		CallingContext cc = this.getCC();
		try {
			// First turn the string ID into an EntityKey so it can be deleted
			DataStoreUserData prototype = DataStoreUserData.assertRelation(cc);
			Datastore ds = cc.getDatastore();
			EntityKey userToDelete = ds.getEntity(prototype, aggregateUid, cc.getCurrentUser()).getEntityKey();
			ds.deleteEntity(userToDelete, cc.getCurrentUser());
		} catch (ODKDatastoreException e) {
			// If you've gotten here there was a datastore problem
			e.printStackTrace();
			throw new DatastoreFailureException(e);
		}
		return true;
	}

  /**
   * Adds and admin to the datastore.
   */
  @Override
  public Boolean addAdmin(OdkTablesAdmin admin) throws AccessDeniedException, DatastoreFailureException {
	  CallingContext cc = this.getCC();
	  try {
		DataStoreUserData prototype = DataStoreUserData.assertRelation(cc);
		DataStoreUserData userData = cc.getDatastore().createEntityUsingRelation(prototype, cc.getCurrentUser());
		userData.setNewUserData(admin);
		//userData.setUserIdAggregate(userData.getEntityKey().getKey());
		userData.persist(cc);
		} catch (ODKDatastoreException e) {
			// If you've gotten here there was a datastore problem
			e.printStackTrace();
			throw new DatastoreFailureException(e);
		}
	  return true;
  }

  @Override
  public Boolean updateAdmin(OdkTablesAdmin admin) throws AccessDeniedException {
    return true;
  }

  private CallingContext getCC() {
	  // should this not be this? should it really be super?
    HttpServletRequest req = super.getThreadLocalRequest();
    return ContextFactory.getCallingContext(this, req);
  }

}
